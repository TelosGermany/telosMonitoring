#!/bin/bash

# Author: TelosGermany
# Mail: contact@telosgermany.io
# Telegram: t.me/TelosGermany
# Monitoring Script 
# Version 1.5.3, 27.07.2019

# config file
source ~/monitor/config

echo  "$(date +%Y-%m-%dT%H:%M:%S) ******************************" | tee -a $result_log

# display information
echo "$(date +%Y-%m-%dT%H:%M:%S) available endpoints / sync / received  *** 1=True/OK *** 0=False/NOT OK ***" | tee -a $result_log

# read endpoint file
# set the Internal Field Seperator to ,
IFS=','
while read -r protocol address port function; do

        if [ $(cleos -u $api get schedule | head -n 25 | grep $bp_name | wc -l ) == 1 ] && [[ "$function" ==  "BP" ]] && [ $(ifconfig $network_interface | grep 'inet' | cut -d: -f2 | awk '{print $2}') == "$address" ]; then
                rec_sec=126
                count_block=10
                incoming_blocks="Produced"
                status_producer="ACTIVE"
                sed_file=produced_blocks
        fi

        # if port 443,8888 than curl, for 9876 cat
        if (($port ==  $https_port)) || (($port == $http_port)); then
	# user curl for port 443,8888
        api_status=$(curl --connect-timeout 2 -s --request POST --url $protocol://$address:$port/$chain_request | wc -m)
        if (( $api_status >  0 )) ; then
	        endpoint_status=1

                # check if ip is own ip 
                elif [ $(ifconfig $network_interface | grep 'inet' | cut -d: -f2 | awk '{print $2}') == "$address" ]; then

	                # if endpoint 443,8888 (nodeos) not available than increase breakcount
	                        break_count=$((break_count+1))
	                        echo "$break_count" > $dir_mon/$break_file
                fi
        else

                # use cat for checking port 9876
                if timeout 2s cat < /dev/null > /dev/tcp/"$address"/$port; then
                        endpoint_status=1

                fi
        fi

        # display result        
        echo "$(date +%Y-%m-%dT%H:%M:%S) $function $protocol://$address:$port Availibility: $endpoint_status" | tee -a $result_log

        endpoint_status=0
done < "$endpoint"

# start and end time to check amount of received blocks
time_end=$(date +%Y-%m-%dT%H:%M:%S)
time_start=$(date +%Y-%m-%dT%H:%M:%S --date '-'$rec_sec' sec')

echo "$(date +%Y-%m-%dT%H:%M:%S) *******************************" | tee -a $result_log
echo "$(date +%Y-%m-%dT%H:%M:%S) status producer: $status_producer" | tee -a $result_log
echo "$(date +%Y-%m-%dT%H:%M:%S) start: $time_start" | tee -a $result_log
echo "$(date +%Y-%m-%dT%H:%M:%S) end: $time_end"  | tee -a $result_log
echo "$(date +%Y-%m-%dT%H:%M:%S) ******************************" | tee -a $result_log

# convert time of initializing chain to seconds
init_chain=$(grep "initializing chain" $stderr_log |tail -n 1 | cut -c 7-25)
init_chain_sec=$(date -d $init_chain +%s)

# Check if stderr.txt > 250 kb or nodeos process is not running or backup is active or initializing chain < 15 min.
if [[ $(stat -c%s $stderr_log) -lt $stderr_size   ]] || [ -z "$nodeos_pid" ] || [ -f "$dir_mon/$backup_file" ]  || [[ $init_chain_sec -ge $(date +%s --date '-'$time_wait' min') ]]; then

	#check dirty flag
	if [ $(tail -n 50 $stderr_log | grep 'database dirty flag set' | wc -l ) -ge 1 ]; then
        	echo "$(date +%Y-%m-%dT%H:%M:%S) *******************************" | tee -a $result_log
        	echo "$(date +%Y-%m-%dT%H:%M:%S) DATABASE DIRTY FLAG" | tee -a $result_log
        	echo "$(date +%Y-%m-%dT%H:%M:%S) *******************************" | tee -a $result_log
        	link_snapshot="$snapshot_url/$snapshot_download"
        	echo "$(date +%Y-%m-%dT%H:%M:%S) Download Snapshot: $snapshot_url/$snapshot_download"
        	wget -P $snapshot_download_dir $snapshot_url/$snapshot_download
        	cd $snapshot_download_dir
        	echo "$(date +%Y-%m-%dT%H:%M:%S) extract snapshot"
        	tar -xvf $snapshot_download_dir/$snapshot_download
        	$nodeos_control stop
        	echo "$(date +%Y-%m-%dT%H:%M:%S) delete /blocks/reversible & /state in $nodeos_data"
        	rm -r $nodeos_data/blocks/reversible
        	rm -r $nodeos_data/state
        	cd $snapshot_download_dir/$dir_extr_snapshot_file
        	bin_file=$(ls *.bin)
        	echo "$(date +%Y-%m-%dT%H:%M:%S) $bin_file"
        	echo "$(date +%Y-%m-%dT%H:%M:%S) start nodeos with dirty_flag option"
        	$nodeos_control dirty_flag $bin_file
        	ps -elf | grep nodeos
        	exit
  	fi

	if [ -f "$dir_mon/$backup_file" ]; then
                echo "$(date +%Y-%m-%dT%H:%M:%S) currently backup is active. nodeos not running. not checking stderr.txt" | tee -a $result_log
                exit

	elif [[ $init_chain_sec -ge $(date +%s --date '-'$time_wait' min') ]] && [ -n "$nodeos_pid" ]; then
                echo "$(date +%Y-%m-%dT%H:%M:%S) initializing chain less than $time_wait minutes. not checking $stderr_log" | tee -a $result_log
                exit
  	fi

        # read first charakter of break.txt
        break_count=$(head -c 1 $dir_mon/$break_file)

        # check if nodoes is running, if yes but filesize stderr.txt do not increase then stop an strestart nodeos via cnod
        if [ -n "$nodeos_pid" ]; then
                echo "$(date +%Y-%m-%dT%H:%M:%S) nodeos process running but file size stderr.txt to small" | tee -a $result_log

                # count up break count
                if (( $break_count < 2 )); then
                        break_count=$((break_count+1))
                        echo "$break_count" > $dir_mon/$break_file
                else

                        # stop and restart nodeos
                        $nodeos_control restart
                        exit
                fi
        else

                # nodeos process is not running, start nodeos via cnod
                $nodeos_control start
                exit
        fi
        echo "$(date +%Y-%m-%dT%H:%M:%S) not checking stderr.txt" | tee -a $result_log
        echo " " | tee -a $result_log
else

        # cut hours and minute from last received block entry 
        lastreceive_stderr=$(grep $incoming_blocks $stderr_log |tail -n 1 | cut -c 7-25)

        # convert to seconds, if no received block found than set any value
        if [ -z "$lastreceive_stderr" ]; then
                lastreceive_sec=1500
        else
                lastreceive_sec=$(date -d $lastreceive_stderr +%s)
        fi

        # read restart_count from restart_count.txt
        restart_count=$(head -c 1 $dir_mon/$restart_count_file)

        # query if blocks received recently
        if [[ $lastreceive_sec -ge $(date +%s --date '-'$rec_sec' sec') ]]; then
                status="$incoming_blocks blocks status: 1"
                restart_count=$((restart_count*10))
        else
                status="$incoming_blocks blocks status: 0"
                restart_count=$((${restart_count:0:1} + 1))
        fi

        # display status
        echo "$(date +%Y-%m-%dT%H:%M:%S) last time $incoming_blocks blocks: $lastreceive_stderr, $status" | tee -a $result_log
        echo  "$(date +%Y-%m-%dT%H:%M:%S) ******************************" | tee -a $result_log

        # check amount of received blocks  
        blocks=$(sed  "/${time_start}/,/${time_end}/! d" $stderr_log | egrep -f $rules_dir/$sed_file | wc -l)

        # check amount of received blocks
        if [[ ($blocks -lt $count_block ) ]]; then
                status="sync status: 0"
                restart_count=$((${restart_count:0:1} + 1))
        else
                status="sync status: 1"
                restart_count=$((restart_count*10))
        fi

        # display status
        echo "$(date +%Y-%m-%dT%H:%M:%S) check amount of $incoming_blocks blocks, blocks: $blocks, $status" | tee -a $result_log
        echo  "$(date +%Y-%m-%dT%H:%M:%S) ******************************" | tee -a $result_log

        if [[ ${restart_count:0:1} -ge  3 ]]; then
                $nodeos_control restart
                echo "1" > $dir_mon/$restart_count_file
        else
                if (( $restart_count > 99 )); then
                        echo "1" > $dir_mon/$restart_count_file
                        restart_count=1
                else
                        echo ${restart_count:0:1} > $dir_mon/$restart_count_file
                fi
        fi
        echo  "$(date +%Y-%m-%dT%H:%M:%S) restart count: $((${restart_count:0:1} - 1))" | tee -a $result_log
        echo "$(date +%Y-%m-%dT%H:%M:%S) ******************************" | tee -a $result_log

        # read defintion error file
        # set the Internal Field Seperator to ,
        IFS=','
        while read -r error_desc error_rating action; do

                # check errors and write it to error logfile
                error_reading=$(sed  "/${time_start}/,/${time_end}/! d" $stderr_log | egrep -f $rules_dir/$error_desc | tee -a $error_log | wc -l)

                # if no error message received set 0
                if [ -z "$error_reading" ]; then
                        error_reading=0
                fi

                #$(date +%Y-%m-%dT%H:%M display status
                echo "$(date +%Y-%m-%dT%H:%M:%S) $error_desc, count: $error_reading, status: $error_rating, action: $action" | tee -a $result_log
                echo  "$(date +%Y-%m-%dT%H:%M:%S) ******************************" | tee -a $result_log
        done < "$def_error"
        echo " " | tee -a $result_log

        # reset break count
        echo "0" > $dir_mon/$break_file
fi
